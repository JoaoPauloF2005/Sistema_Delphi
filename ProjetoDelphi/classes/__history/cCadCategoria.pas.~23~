unit cCadCategoria;

interface

uses
  System.Classes, Vcl.Controls, Vcl.ExtCtrls, Vcl.Dialogs, ZAbstractConnection, ZConnection,
  ZAbstractRODataset, ZAbstractDataset, ZDataset, System.SysUtils; // Lista de units necessárias

type
  // Classe TCategoria para gerenciar categorias no banco de dados
  TCategoria = class
  private
    ConexaoDB: TZConnection;  // Conexão com o banco de dados (via Zeos)
    F_categoriaId: Integer;   // Campo que armazena o ID da categoria
    F_descricao: String;      // Campo que armazena a descrição da categoria

    // Função para obter o ID da categoria
    function getCodigo: Integer;

    // Função para obter a descrição da categoria
    function getDescricao: string;

    // Procedimento para definir o ID da categoria
    procedure setCodigo(const Value: Integer);

    // Procedimento para definir a descrição da categoria
    procedure setDescricao(const Value: string);

  public
    // Construtor que inicializa a classe com a conexão ao banco de dados
    constructor Create(aConexao: TZConnection);

    // Destrutor que libera recursos ao destruir a classe
    destructor Destroy; override;

    // Função para inserir uma nova categoria no banco de dados
    function Inserir: Boolean;

    // Função para atualizar uma categoria existente no banco de dados
    function Atualizar: Boolean;

    // Função para apagar uma categoria do banco de dados
    function Apagar(id:Integer): Boolean;

    // Função para selecionar uma categoria específica pelo ID
    function Selecionar(id: Integer): Boolean;

  published
    // Propriedade para acessar o ID da categoria
    property codigo: Integer read getCodigo write setCodigo;

    // Propriedade para acessar a descrição da categoria
    property descricao: string read getDescricao write setDescricao;
  end;

implementation

{ TCategoria }

{$REGION 'Constructor and Destructor'}

constructor TCategoria.Create(aConexao: TZConnection);
begin
  // Inicializa a conexão recebida no parâmetro
  ConexaoDB := aConexao;
end;

destructor TCategoria.Destroy;
begin
  // Executa procedimentos de limpeza (caso necessário) e chama o destrutor da classe pai
  inherited;
end;

{$ENDREGION}

{$REGION 'CRUD'}

function TCategoria.Apagar(id:Integer): Boolean;
var
  Qry : TZQuery;
begin
  if MessageDlg('Apagar o Registro: '+#13+#13+
              'Código: '+IntToStr(F_categoriaId)+#13+
              'Descrição: '+F_descricao,mtConfirmation,[mbYes, mbNo], 0)=mrNo then begin
    Result:=False;
    Abort;
  end;

  try
    Result:=True;
    Qry:=TZQuery.Create(nil);
    Qry.Connection:=ConexaoDB;
    Qry.SQL.Clear;
    Qry.SQL.Add('DELETE FROM categorias WHERE categoriaId = :categoriaId');

    Qry.ParamByName('categoriaId').AsInteger :=id;

    try
      Qry.ExecSQL;
    except
      Result:=False;

    end;

  finally
    if Assigned(Qry) then
      FreeAndNil(Qry);
  end;

  end;

end;

function TCategoria.Atualizar: Boolean;
var
  Qry: TZQuery; // Declaração de uma consulta SQL do tipo TZQuery
begin
  try
    // Cria e configura a consulta
    Qry := TZQuery.Create(nil);
    Qry.Connection := ConexaoDB; // Associa a conexão ao banco

    // Prepara a instrução SQL para atualizar uma categoria
    Qry.SQL.Clear;
    Qry.SQL.Add('UPDATE categorias SET descricao = :descricao WHERE categoriaId = :categoriaId');

    // Atribui valores aos parâmetros SQL
    Qry.ParamByName('categoriaId').AsInteger := Self.F_categoriaId;
    Qry.ParamByName('descricao').AsString := Self.F_descricao;

    try
      Qry.ExecSQL; // Executa a consulta SQL
    except
      Result := False; // Retorna False em caso de erro
      Exit; // Interrompe a execução
    end;

  finally
    // Libera a consulta da memória
    if Assigned(Qry) then
      FreeAndNil(Qry);
  end;

  Result := True; // Retorna True para indicar sucesso
end;


function TCategoria.Inserir: Boolean;
var
  Qry: TZQuery; // Declaração de uma consulta SQL do tipo TZQuery
begin
  try
    // Cria e configura a consulta
    Qry := TZQuery.Create(nil);
    Qry.Connection := ConexaoDB; // Associa a conexão ao banco

    // Prepara a instrução SQL para inserir uma nova categoria
    Qry.SQL.Clear;
    Qry.SQL.Add('INSERT INTO categorias (descricao) VALUES (:descricao)');

    // Atribui valor ao parâmetro SQL
    Qry.ParamByName('descricao').AsString := Self.F_descricao;

    try
      Qry.ExecSQL; // Executa a consulta SQL
    except
      Result := False; // Retorna False em caso de erro
      Exit; // Interrompe a execução
    end;

  finally
    // Libera a consulta da memória
    if Assigned(Qry) then
      FreeAndNil(Qry);
  end;

  Result := True; // Retorna True para indicar sucesso
end;

function TCategoria.Selecionar(id: Integer): Boolean;
var
  Qry: TZQuery; // Declaração de uma consulta SQL do tipo TZQuery
begin
  try
    Result := True; // Inicializa o resultado como True

    // Cria e configura a consulta
    Qry := TZQuery.Create(nil);
    Qry.Connection := ConexaoDB; // Associa a conexão ao banco

    // Prepara a instrução SQL para selecionar uma categoria pelo ID
    Qry.SQL.Clear;
    Qry.SQL.Add('SELECT categoriaId, descricao FROM categorias WHERE categoriaId = :categoriaId');

    // Atribui valor ao parâmetro SQL
    Qry.ParamByName('categoriaId').AsInteger := id;

    try
      Qry.Open; // Executa a consulta e abre o dataset com os resultados

      // Atribui os valores obtidos às variáveis da classe
      Self.F_categoriaId := Qry.FieldByName('categoriaId').AsInteger;
      Self.F_descricao := Qry.FieldByName('descricao').AsString;

    except
      Result := False; // Retorna False em caso de erro
    end;

  finally
    // Libera a consulta da memória
    if Assigned(Qry) then
      FreeAndNil(Qry);
  end;
end;

{$ENDREGION}

{$REGION 'Gets'}

function TCategoria.getCodigo: Integer;
begin
  // Retorna o ID da categoria
  Result := Self.F_categoriaId;
end;

function TCategoria.getDescricao: string;
begin
  // Retorna a descrição da categoria
  Result := Self.F_descricao;
end;

{$ENDREGION}

{$REGION 'Sets'}

procedure TCategoria.setCodigo(const Value: Integer);
begin
  // Define o ID da categoria
  Self.F_categoriaId := Value;
end;

procedure TCategoria.setDescricao(const Value: string);
begin
  // Define a descrição da categoria
  Self.F_descricao := Value;
end;

{$ENDREGION}

end.

