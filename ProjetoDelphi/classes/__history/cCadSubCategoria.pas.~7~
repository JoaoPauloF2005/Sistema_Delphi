unit cCadSubCategoria;

interface

uses
  System.Classes, Vcl.Controls, Vcl.ExtCtrls, Vcl.Dialogs, ZAbstractConnection, ZConnection,
  ZAbstractRODataset, ZAbstractDataset, ZDataset, System.SysUtils;

  type
  TSubCategoria = class
  F_subCategoriaId: Integer;
  F_descricao: String;
  F_categoriaId: Integer;

    private
    ConexaoDB: TZConnection;
    function Apagar: Boolean;
    function Atualizar: Boolean;
    public
    constructor Create(aConexao: TZConnection);
    destructor Destroy; override;
    published
  end;

implementation

constructor TSubCategoria.Create(aConexao: TZConnection);
begin
  // Inicializa a conexão recebida no parâmetro
  ConexaoDB := aConexao;
end;

destructor TSubCategoria.Destroy;
begin
  // Executa procedimentos de limpeza (caso necessário) e chama o destrutor da classe pai
  inherited;
end;

function TSubCategoria.Apagar: Boolean;
var
  Qry: TZQuery;
begin
  Result := False;

  // Solicita confirmação ao usuário antes de apagar o registro
  if MessageDlg('Deseja realmente apagar a categoria "' + F_descricao + '"?', mtConfirmation, [mbYes, mbNo], 0) = mrNo then
    Exit;

  try
    Qry := TZQuery.Create(nil);
    Qry.Connection := ConexaoDB;
    Qry.SQL.Text := 'DELETE FROM subCategoria WHERE subCategoria = :subCategoriaId';
    Qry.ParamByName('categoriaId').AsInteger := F_categoriaId;

    try
      ConexaoDB.StartTransaction;
      Qry.ExecSQL;
      ConexaoDB.Commit;
      Result := True;
    except
      on E: Exception do
      begin
        ConexaoDB.Rollback;

        // Verifica se o erro é de chave estrangeira
        if Pos('FK_', E.Message) > 0 then
          raise Exception.Create('Não é possível excluir esta subCategoria porque ela está vinculada a outros registros.')
        else
          raise Exception.Create('Erro ao excluir a categoria: ' + E.Message);
      end;
    end;
  finally
    Qry.Free;
  end;
end;

function TSubCategoria.Atualizar: Boolean;
var
  Qry: TZQuery; // Declaração de uma consulta SQL do tipo TZQuery
begin
  try
    // Cria e configura a consulta
    Qry := TZQuery.Create(nil);
    Qry.Connection := ConexaoDB; // Associa a conexão ao banco

    // Prepara a instrução SQL para atualizar uma categoria
    Qry.SQL.Clear;
    Qry.SQL.Add('UPDATE categorias SET descricao = :descricao WHERE categoriaId = :categoriaId');

    // Atribui valores aos parâmetros SQL
    Qry.ParamByName('categoriaId').AsInteger := Self.F_categoriaId;
    Qry.ParamByName('descricao').AsString := Self.F_descricao;

    try
    	ConexaoDB.StartTransaction;
      Qry.ExecSQL;   // Executa a consulta SQL
      ConexaoDB.Commit;
    except
    	ConexaoDB.Rollback;
      Result:=False;
    end;

  finally
    // Libera a consulta da memória
    if Assigned(Qry) then
      FreeAndNil(Qry);
  end;

  Result := True; // Retorna True para indicar sucesso
end;



end.
