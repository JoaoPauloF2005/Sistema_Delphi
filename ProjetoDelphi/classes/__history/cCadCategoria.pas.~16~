unit cCadCategoria;

interface

uses
  System.Classes, Vcl.Controls, Vcl.ExtCtrls, Vcl.Dialogs, ZAbstractConnection, ZConnection,
  ZAbstractRODataset, ZAbstractDataset, ZDataset, System.SysUtils; // lista de Units necessárias

type
  // Classe TCategoria para gerenciar categorias no banco de dados
  TCategoria = class
  private
    ConexaoDB: TZConnection;  // Conexão com o banco de dados
    F_categoriaId: Integer;   // Campo que armazena o ID da categoria
    F_descricao: String;      // Campo que armazena a descrição da categoria
    function getCodigo: Integer;        // Função para obter o ID da categoria
    function getDescricao: string;      // Função para obter a descrição da categoria
    procedure setCodigo(const Value: Integer);   // Procedimento para definir o ID da categoria
    procedure setDescricao(const Value: string); // Procedimento para definir a descrição da categoria
  public
    constructor Create(aConexao: TZConnection); // Construtor, que recebe uma conexão como parâmetro
    destructor Destroy; override;               // Destrutor, que limpa os recursos quando a classe for destruída
    function Inserir: Boolean;      // Função para inserir uma nova categoria no banco de dados
    function Atualizar: Boolean;    // Função para atualizar uma categoria no banco de dados
    function Apagar: Boolean;       // Função para apagar uma categoria do banco de dados
    function Selecionar(id: Integer): Boolean; // Função para selecionar uma categoria específica pelo ID
  published
    property codigo: Integer read getCodigo write setCodigo;      // Propriedade para acessar o ID da categoria
    property descricao: string read getDescricao write setDescricao; // Propriedade para acessar a descrição da categoria
  end;

implementation

{ TCategoria }

{$REGION 'Constructor and Destructor'}

constructor TCategoria.Create(aConexao: TZConnection);
begin
  // Construtor que inicializa a conexão com o banco de dados
  ConexaoDB := aConexao;
end;

destructor TCategoria.Destroy;
begin
  // Destrutor que libera recursos (não há recursos adicionais para liberar, mas pode ser útil no futuro)
  inherited;
end;

{$ENDREGION}

{$REGION 'CRUD'}

function TCategoria.Apagar: Boolean;
begin
  // Apaga uma categoria do banco de dados (a implementação completa ainda não está feita)
  ShowMessage('Apagado'); // Exibe uma mensagem de apagado
  Result := True;
end;

function TCategoria.Atualizar: Boolean;
begin
  // Atualiza uma categoria no banco de dados (a implementação completa ainda não está feita)
  ShowMessage('Atualizado'); // Exibe uma mensagem de atualizado
  Result := True;
end;

function TCategoria.Inserir: Boolean;
var
  Qry: TZQuery; // Declara uma consulta do tipo TZQuery
begin
  try
    Qry := TZQuery.Create(nil);        // Cria a consulta
    Qry.Connection := ConexaoDB;       // Atribui a conexão ao banco de dados
    Qry.SQL.Clear;                     // Limpa qualquer SQL existente
    Qry.SQL.Add('INSERT INTO categorias (descricao) values (:descricao)');  // Adiciona a instrução SQL para inserir uma nova categoria
    Qry.ParamByName('descricao').AsString := Self.F_descricao;  // Substitui o parâmetro 'descricao' pelo valor da propriedade da classe
    try
      Qry.ExecSQL; // Executa a instrução SQL
    except
      Result := False;  // Se ocorrer um erro, retorna False
    end;
  finally
    if Assigned(Qry) then
      FreeAndNil(Qry);  // Libera a consulta da memória após o uso
  end;
  Result := True;  // Se tudo correr bem, retorna True
end;

function TCategoria.Selecionar(id: Integer): Boolean;
var
  Qry: TZQuery; // Declara uma consulta do tipo TZQuery
begin
  try
    Result := True; // Inicializa o resultado como True
    Qry := TZQuery.Create(nil);   // Cria a consulta
    Qry.Connection := ConexaoDB;  // Atribui a conexão ao banco de dados
    Qry.SQL.Clear;                // Limpa qualquer SQL existente
    Qry.SQL.Add('SELECT categoriaId, descricao FROM categorias WHERE categoriaId = :categoriaId'); // Adiciona a instrução SQL para selecionar a categoria pelo ID
    Qry.ParamByName('categoriaId').AsInteger := id; // Substitui o parâmetro 'categoriaId' pelo valor passado
    try
      Qry.Open;  // Executa a consulta e abre os resultados

      // Atribui os valores obtidos do banco de dados às variáveis da classe
      Self.F_categoriaId := Qry.FieldByName('categoriaid').AsInteger;
      Self.F_descricao := Qry.FieldByName('descricao').AsString;
    except
      Result := False;  // Se ocorrer um erro, retorna False
    end;
  finally
    if Assigned(Qry) then
      FreeAndNil(Qry);  // Libera a consulta da memória após o uso
  end;
end;
{$ENDREGION}

{$REGION 'Gets'}

function TCategoria.getCodigo: Integer;
begin
  // Retorna o valor do ID da categoria
  Result := Self.F_categoriaId;
end;

function TCategoria.getDescricao: string;
begin
  // Retorna o valor da descrição da categoria
  Result := Self.F_descricao;
end;

{$ENDREGION}

{$REGION 'Sets'}

procedure TCategoria.setCodigo(const Value: Integer);
begin
  // Define o valor do ID da categoria
  Self.F_categoriaId := Value;
end;

procedure TCategoria.setDescricao(const Value: string);
begin
  // Define o valor da descrição da categoria
  Self.F_descricao := Value;
end;

{$ENDREGION}

end.

